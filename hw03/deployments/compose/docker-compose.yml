version: "2.1"
services:
  crudservice:
    image: astrviktor/crudservice:1.1.3
#    build: ../../docker
    container_name: crudservice
    hostname: crudservice
    volumes:
      - ../../configs/config.yaml:/etc/crudservice/config.yaml
    ports:
      - "8000:8000"
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: crudservice
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      docker:
        aliases:
          - crudservice

  postgres:
    image: postgres:15.1-bullseye
    container_name: postgres
    environment:
      POSTGRES_DB: "users"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
      TZ: 'UTC'
      PGTZ: 'UTC'
    volumes:
      - volume_postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      docker:
        aliases:
          - postgres

  prometheus:
    image: prom/prometheus:v2.43.0
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      docker:
        aliases:
          - prometheus

  node-exporter:
    image: prom/node-exporter:v1.5.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: node-exporter
    hostname: node-exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    expose:
      - 9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    labels:
      org.label-schema.group: "monitoring"
    networks:
      docker:
        aliases:
          - node-exporter

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
#    volumes:
#      - ./grafana:/var/lib/grafana
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      docker:
        aliases:
          - grafana

  fluentd:
    build: ./fluentd
    container_name: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - elasticsearch
    networks:
      docker:
        aliases:
          - fluentd

  elasticsearch:
    image: elasticsearch:7.4.0
    container_name: elasticsearch
    environment:
      - ELASTIC_CLUSTER=false
      - CLUSTER_NODE_MASTER=true
      - CLUSTER_MASTER_NODE_NAME=es01
      - discovery.type=single-node
    expose:
      - 9200
    ports:
      - "9200:9200"
    networks:
      docker:
        aliases:
          - elasticsearch


  kibana:
    image: kibana:7.4.0
    container_name: kibana
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"
    networks:
      docker:
        aliases:
          - kibana

  yandex-tank:
    #    image: direvius/yandex-tank
    build: ./yandex-tank
    #    entrypoint: /bin/bash
    depends_on:
      - crudservice
    volumes:
      - ./yandex-tank/testing.yaml:/var/loadtest/testing.yaml
      - ./yandex-tank/testing.sh:/var/loadtest/testing.sh
    container_name: yandex-tank
    networks:
      docker:
        aliases:
          - yandex-tank


volumes:
  volume_postgres:

networks:
  docker:
    driver: bridge
